%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "yaccExample.h"
#include "Semantics.h"
#include "CodeGen.h"


extern int yylex();	/* The next token function. */
extern char *yytext;   /* The matched token text.  */
extern int yyleng;      /* The token text length.   */
extern int yyparse();
extern int yyerror(char *);
void dumpTable();

//You will want 2 symtab tables, 1 for functions, 1 for global
extern struct SymTab *table;
extern struct SymEntry *entry;
extern struct TypeAttr * attr; 
char* tName = NULL;
%}

%union {
  long val;
  char * string;
  struct ExprRes * ExprRes;
  struct InstrSeq * InstrSeq;
  struct ExprResList * ExprResList;
  struct IdList * IdList;
  struct FuncParams * FuncParams;
}

%type <string> Id
%type <ExprRes> Literal
%type <ExprRes> Expo
%type <ExprRes> PStmt
%type <ExprRes> Factor
%type <ExprRes> Term
%type <ExprRes> Basic
%type <ExprRes> OExpr
%type <ExprRes> BExpr
%type <ExprRes> BAExpr
%type <ExprRes> BOExpr
%type <ExprRes> Expr
%type <ExprResList> ExprSeq
%type <FuncParams> VarSeq
%type <FuncParams>Var
%type <InstrSeq> StmtSeq
%type <InstrSeq> Stmt
%type <IdList> IdSeq

%type <string> TypeSpecifier
%type <string> AryNumber


%token Ident
%token Int Bool Float Void 		
%token IntLit BoolLit	StrLit FloatLit
%token EQ	NEQ LTE GTE
%token AND OR 
%token Write
%token Print Println Printsp PrintStr Read
%token IF ELSE WHILE


/*
IF YOU ARE DOING FLOATS: 
YOU WILL NEED TO MODIFY CODEGEN SO THAT EVERY FUNCTION SUPPORTS FLOAT,
I HAVE SOME OF THEM IMPLEMENTED, SO YOU WILL GET AN IDEA
ANY TIME YOU SEE A NORMAL REGISTER BEING MANIPULATED, SO WILL FLOATS 
*/
%%

Prog			    :	Declarations StmtSeq						                            { Finish($2); } ;
Declarations	:	Dec Declarations							                              { };
Declarations  : Function Declarations                                       { };
Declarations	:   									                                        { };
Dec           : TypeSpecifier Id '[' AryNumber ']' ';'                      { addVar($1, $2, $4, 1); };
Dec			      :	TypeSpecifier Id ';'                                        { addVar($1, $2, NULL, 0); };
DecSeq        : Dec DecSeq                                                  { };      
DecSeq        :                                                             { };
Function      : TypeSpecifier Id '(' VarSeq ')' '{' DecSeq StmtSeq '}'      { addFunction($1, $2, $4, $8); } ;      
VarSeq        : VarSeq ',' Var                                              { $$ = appendFuncVar($1, $3); } ;  
VarSeq        : Var                                                         { $$ = appendFuncVar(NULL, $1); } ; 
VarSeq        :                                                             { $$ = appendFuncVar(NULL, NULL); } ; 
Var           : TypeSpecifier Id '[' ']'                                    { $$ = getVar($1, $2, 1); }; //
Var           : TypeSpecifier Id                                            { $$ = getVar($1, $2, 0); };
TypeSpecifier : Int                                                         { $$ = strdup(yytext);  };         
TypeSpecifier : Bool                                                        { $$ = strdup(yytext);   };
TypeSpecifier : Float                                                       { $$ = strdup(yytext);  };   
TypeSpecifier : Void                                                        { $$ = strdup(yytext);  };   
StmtSeq 		  :	Stmt StmtSeq								                                { $$ = AppendSeq($1, $2); } ;
StmtSeq		    :										                                          { $$ = NULL;} ;
Stmt			    :	Write Expr ';'								                              { $$ = doPrint($2, "_nl", 1); };
Stmt          : Print '(' ExprSeq ')' ';'                                   { $$ = addAllExprResList($3); };
Stmt          : PrintStr '(' Expr ')' ';'                                   { $$ = doPrint($3, "_str", 1); };
Stmt          : Println '(' ')' ';'                                         { $$ = doPrint(NULL, "_nl", 1); };
Stmt          : Printsp '(' Expr ')' ';'                                    { $$ = doPrint($3, "_sp", 1); };
Stmt          : Read '(' IdSeq ')' ';'                                      { $$ = readAllId($3); };
IdSeq         : IdSeq ',' Id                                                { $$ = appendID($1, $3); };
IdSeq         : Id                                                          { $$ = appendID(NULL, strdup(yytext)); };
Stmt			    :	Id '=' Expr ';'							                                { $$ = doAssign($1, $3);} ;
Stmt          : Id '[' Expr ']' '=' Expr ';'                                { $$ = doAssignAry($1, $3, $6); };
Stmt			    :	IF '(' Expr ')' '{' StmtSeq '}'					                    { $$ = doBoolTest($3, $6, NULL, "if"); }; 
Stmt          : IF '(' Expr ')' '{' StmtSeq '}' ELSE '{' StmtSeq '}'        { $$ = doBoolTest($3, $6, $10, "ifelse"); };
Stmt          : WHILE '(' Expr ')' '{' StmtSeq '}'                          { $$ = doBoolTest($3, $6, NULL, "while"); };
ExprSeq       : ExprSeq ',' Expr                                            { $$ = appendExpr($1, $3); };
ExprSeq       : Expr                                                        { $$ = appendExpr(NULL, $1); };
Expr          : BOExpr                                                      { $$ = $1; };
BOExpr        : BOExpr OR BAExpr                                            { $$ = doRelatOp($1, $3, "or"); };
BOExpr        : BAExpr                                                      { $$ = $1; };
BAExpr        : BAExpr AND BExpr                                            { $$ = doRelatOp($1, $3, "and"); };
BAExpr        : BExpr                                                       { $$ = $1; };
BExpr	      	:	BExpr EQ OExpr								                              { $$ = doRelatOp($1, $3, "seq");};
BExpr	      	:	BExpr NEQ OExpr								                              { $$ = doRelatOp($1, $3, "sne");};
BExpr         : OExpr                                                       { $$ = $1; };
OExpr         : OExpr '<' Basic                                             { $$ = doRelatOp($1, $3, "slt"); };
OExpr         : OExpr '>' Basic                                             { $$ = doRelatOp($1, $3, "sgt"); };
OExpr         : OExpr LTE Basic                                             { $$ = doRelatOp($1, $3, "sle"); };
OExpr         : OExpr GTE Basic                                             { $$ = doRelatOp($1, $3, "sge"); };
OExpr         : Basic                                                       { $$ = $1; };
Basic		    	:	Basic '+' Term								                              { $$ = doArithOp($1, $3, "add"); };
Basic			    :	Basic '-' Term								                              { $$ = doArithOp($1, $3, "sub"); };
Basic			    :	Term		 							                                      { $$ = $1; };
Term	        :	Term '*' Factor								                              { $$ = doArithOp($1, $3, "mul"); };
Term		      :	Term '/' Factor								                              { $$ = doArithOp($1, $3, "div"); };
Term		      :	Term '%' Factor								                              { $$ = doArithOp($1, $3, "mod"); };
Term		      :	Factor									                                    { $$ = $1; };
Factor        : Expo '^' Factor                                             { $$ = doArithOp($1, $3, "exp"); };
Factor        : Expo                                                        { $$ = $1; };
Expo          : '-' Expo                                                    { $$ = doArithOp($2, NULL, "neg"); };
Expo          : '!' Expo                                                    { $$ = doRelatOp($2, NULL, "not"); };
Expo          : PStmt                                                       { $$ = $1; };
PStmt         : Id '(' ExprSeq ')'                                          { $$ = doFunctionCall($1, $3); };
PStmt         : '(' Expr ')'                                                { $$ = $2; };
PStmt         : Literal                                                     { $$ = $1; };
Literal		    : IntLit									                                    { $$ = doLit(yytext, INT); };
Literal       : BoolLit                                                     { $$ = doLit(yytext, BOOL); };
Literal       : FloatLit                                                    { $$ = doLit(yytext, FLOAT); };
Literal       : StrLit                                                      { $$ = doLit(yytext, STR); };
Literal		    : Ident					                                              { $$ = doRval(yytext); };
Id			      : Ident		                                                    { $$ = strdup(yytext); };
AryNumber     : IntLit                                                       { $$ = strdup(yytext); };
%%

int yyerror(char *s)  {
  WriteIndicator(GetCurrentColumn());
  WriteMessage("Illegal Character in YACC");
  return 1;
}
